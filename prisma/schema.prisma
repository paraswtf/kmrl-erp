datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //Notification Groups
    groupIds String[] @db.ObjectId
    groups   Group[]  @relation(fields: [groupIds], references: [id], "UserGroup")

    //Roles
    roleIds String[] @db.ObjectId
    roles   Role[]   @relation(fields: [roleIds], references: [id], "UserRole")

    //Documents uploaded by user
    documents Document[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

//Detpartment for personalised dashboards and notifications
model Group {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userIds String[] @db.ObjectId
    users   User[]   @relation(references: [id], fields: [userIds], "UserGroup")
}

//Roles for RBAC
model Role {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    position    Int      @default(0) //This is the position of the role in the hierarchy
    userIds     String[] @db.ObjectId
    users       User[]   @relation(references: [id], fields: [userIds], "UserRole")
    permissions Int      @default(0) //This is a permissions bitfield (0 = no permissions)
}

model Document {
    id                 String     @id @default(auto()) @map("_id") @db.ObjectId
    title              String
    cloudinaryUrl      String
    summary            String
    department         String
    docType            String
    cloudinaryPublicId String
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    parentId           String?    @db.ObjectId
    parent             Document?  @relation("DocumentToDocument", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children           Document[] @relation("DocumentToDocument")
    versionIncrement   Int        @default(0) //This is incremented every time a new version is uploaded

    uploadedById String @db.ObjectId
    uploadedBy   User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
}
